/////////////////////////////////////////////////////////////////////////////
// ИНТЕРФЕЙС - тип, который служит для объектов или классов, где мы указываем какие поля, какие функции нужны для объекта.
// Не компилируется, нужны только на этапе разработки




/////////////////////////////////////////////////////////////////////////////
// readonly только для чтения
// ? не обязательное поле
/////////////////////////////////////////////////////////////////////////////
interface Rect {
    readonly id: string 
    color?: string
    size: {
        width: number
        height: number
    }
}   

const rect1: Rect = {
    id: '1234',
    size: {
        width: 50,
        height: 30
    },
    color: '#ccc'
}

const rect2: Rect = {
    id: '1235',
    size: {
        width: 20,
        height: 10
    }
}

rect2.color = 'black'
//rect2.id = '0000' // ошибка readonly

// Можно указывать к какиу типу будет относиться объект
const rect3 = {} as Rect  // приведение типа новый способ
const rect4 = <Rect>{}  // приведение типа старый способ
/////////////////////////////////////////////////////////////////////////////




/////////////////////////////////////////////////////////////////////////////
// Наследование интерфейсов для объектов
/////////////////////////////////////////////////////////////////////////////
interface RectWithArea extends Rect {
    getArea: () => number
}

const rect5: RectWithArea = {
    id: '123',
    size: {
        width: 20,
        height: 70
    },
    getArea(): number {
        return this.size.width * this.size.height
    }
}
/////////////////////////////////////////////////////////////////////////////




/////////////////////////////////////////////////////////////////////////////
// Наследование интерфейсов для классов
/////////////////////////////////////////////////////////////////////////////
interface IClock {
    time: Date

    setTime(date: Date): void
    getTime(): Date
}

class Clock implements IClock {
    time: Date = new Date()

    setTime(date: Date): void {
        this.time = date
    }
    getTime(): Date {
        return this.time
    }
}
/////////////////////////////////////////////////////////////////////////////




/////////////////////////////////////////////////////////////////////////////
// Интерефейс для объекта или класса, у которого будет много динамичкских полей
/////////////////////////////////////////////////////////////////////////////
interface IStyles {
    [key: string]: string   // ключ стринг, значение стринг
}

const css: IStyles = {
    border: '1px',
    padding: '2px',
    width: '100px'
}
/////////////////////////////////////////////////////////////////////////////