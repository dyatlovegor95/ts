/////////////////////////////////////////////////////////////////////////////
// БАЗОВЫЕ ТИПЫ TYPESCRIPT




/////////////////////////////////////////////////////////////////////////////
// Type Boolean
/////////////////////////////////////////////////////////////////////////////
const isFetching: boolean = true
const isLoading: boolean = false
/////////////////////////////////////////////////////////////////////////////




/////////////////////////////////////////////////////////////////////////////
// Type Number
/////////////////////////////////////////////////////////////////////////////
let int: number = 42
//int = ''  // ошибка, нельзя происвоить другой тип
const float: number = 4.2
const num: number = 3e10
/////////////////////////////////////////////////////////////////////////////




/////////////////////////////////////////////////////////////////////////////
// Type String
/////////////////////////////////////////////////////////////////////////////
const message: string = 'Hello Typescript'
/////////////////////////////////////////////////////////////////////////////




/////////////////////////////////////////////////////////////////////////////
// Type Array
/////////////////////////////////////////////////////////////////////////////
const numberArray: number[] = [1, 1, 2, 3, 5, 8, 13]          // стандартный способ
const numberArray2: Array<number> = [1, 1, 2, 3, 5, 8, 13]    // способ через generic (обобщенный тип)

const words: string[] = ['Hello Typescript', 'Egor']
/////////////////////////////////////////////////////////////////////////////




/////////////////////////////////////////////////////////////////////////////
// Type Tuple - массив, состоящий из элементов различных типов
/////////////////////////////////////////////////////////////////////////////
const contact: [string, number] = ['Egor', 791231231213]
/////////////////////////////////////////////////////////////////////////////




/////////////////////////////////////////////////////////////////////////////
// Type Any - используется для переопределения типа данных
/////////////////////////////////////////////////////////////////////////////
let variable: any = 42
variable = 'New String'
/////////////////////////////////////////////////////////////////////////////




/////////////////////////////////////////////////////////////////////////////
// Type Function
/////////////////////////////////////////////////////////////////////////////
function sayMyName(name: string): void { // функция принимает строку, но ничего не возвращает
    console.log(name)
}
sayMyName('Egor')

function sayMyName2(name: string): string { // функция принимает строку, и возвращает строку
    return name
}
console.log(sayMyName2('Egor2'))
/////////////////////////////////////////////////////////////////////////////




/////////////////////////////////////////////////////////////////////////////
// Type Never - используется когда функция постоянно возвращает ошибку, либо когда функция действительно что-то постоянно делает
/////////////////////////////////////////////////////////////////////////////
function throwError(message: string): never {
    throw new Error(message)
}

function infinity(): never {
    while (true) {

    }
}
/////////////////////////////////////////////////////////////////////////////




/////////////////////////////////////////////////////////////////////////////
// Type - свой собственный ТИП, мы можем использовать примитиыные типы и создавать к ним псевдоноимы
/////////////////////////////////////////////////////////////////////////////
type Login = string

const login: Login = 'admin'
//const login2: Login = 222 // ошибка

// Например id в нашем приложении может быть как числом так и строкой
type ID = string | number
const id1: ID = 1234
const id2: ID = '1234'
/////////////////////////////////////////////////////////////////////////////




/////////////////////////////////////////////////////////////////////////////
// Type Null, Undefined
/////////////////////////////////////////////////////////////////////////////
type someType = string | null | undefined